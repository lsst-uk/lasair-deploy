heat_template_version: 2015-04-30

description: Heat template to deploy an instance of the Lasair system

parameters:
  key_name:
    description: Name of a KeyPair to enable SSH access.
    type: string
  flavor_small:
    description: Flavor to use for small instances.
    type: string
    default: c3.small
  flavor_medium:
    description: Flavor to use for medium instances.
    type: string
    default: c3.medium
  flavor_large:
    description: Flavor to use for large instances.
    type: string
    default: c3.large
  flavor_xlarge:
    description: Flavor to use for xlarge instances.
    type: string
    default: c3.xlarge
  image_id:
    description: Name or ID of the image to use.
    type: string
    default: ubuntu-focal-20.04-nogui
  net:
    description: Name of the private network.
    type: string
    default: LSST - Private Network
  external_net:
    description: Name of the external network.
    type: string
    default: External
  n_kafka:
    description: Number of kafka instances
    type: number
    default: 1
  n_ingest:
    description: Number of ingest instances
    type: number
    default: 1
  n_sherlock:
    description: Number of sherlock instances
    type: number
    default: 1
  n_filter:
    description: Number of sherlock instances
    type: number
    default: 1
  n_cassandra:
    description: Number of sherlock instances
    type: number
    default: 1

resources:
  # Volume to use for the service instance
  # Larger than default size is primarily for Prometheus
  svc-vol:
    type: OS::Cinder::Volume
    properties:
      size: 50
      image: { get_param: image_id }
  # Service instance runs vaious services (e.g. Watchlist, Area, TNS)
  # and also monitoring (Prometheus and Grafana)
  svc:
    type: OS::Nova::Server
    properties:
      name: { list_join: [ '-', [ { get_param: OS::stack_name }, "svc"] ] }
      key_name: { get_param: key_name }
      flavor: { get_param: flavor_small  }
      block_device_mapping_v2:
        - device_name: vda
          volume_id: { get_resource: svc-vol }
          delete_on_termination: true
      networks:
        - network: { get_param: net }
  # Assign the service instance a floating IP
  # DISABLED FOR TESTING AT RAL
  #svc_ip:
  #  type: OS::Neutron::FloatingIP
  #  properties:
  #    floating_network: { get_param: external_net }
  #association:
  #  type: OS::Neutron::FloatingIPAssociation
  #  properties:
  #    floatingip_id: { get_resource: svc_ip }
  #    port_id: {get_attr: [svc, addresses, {get_param: net}, 0, port]}

  # Web server (also currently proxy and api)
  web:
    type: OS::Nova::Server
    properties:
      name: { list_join: [ '-', [ { get_param: OS::stack_name }, "web"] ] }
      key_name: { get_param: key_name }
      flavor: { get_param: flavor_xlarge  }
      image: { get_param: image_id }
      networks:
        - network: { get_param: net }

  # Assign the proxy server a floating IP
  # DISABLED FOR TESTING AT RAL
  #proxy_ip:
  #  type: OS::Neutron::FloatingIP
  #  properties:
  #    floating_network: { get_param: external_net }
  #association:
  #  type: OS::Neutron::FloatingIPAssociation
  #  properties:
  #    floatingip_id: { get_resource: proxy_ip }
  #    port_id: {get_attr: [web, addresses, {get_param: net}, 0, port]}

  db:
    type: OS::Nova::Server
    properties:
      name: { list_join: [ '-', [ { get_param: OS::stack_name }, "db"] ] }
      key_name: { get_param: key_name }
      flavor: { get_param: flavor_xlarge  }
      image: { get_param: image_id }
      networks:
        - network: { get_param: net }

  kafka_pub:
    type: OS::Nova::Server
    properties:
      name: { list_join: [ '-', [ { get_param: OS::stack_name }, "kafka_pub"] ] }
      key_name: { get_param: key_name }
      flavor: { get_param: flavor_small  }
      image: { get_param: image_id }
      networks:
        - network: { get_param: net }

  kafka_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: n_kafka }
      resource_def:
        type: OS::Nova::Server
        properties:
          name: { list_join: [ '-', [ { get_param: OS::stack_name }, "kafka", "%index%" ]] }
          key_name: { get_param: key_name }
          image: { get_param: image_id }
          flavor: { get_param: flavor_large  }
          networks:
            - network: { get_param: net }

  ingest_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: n_ingest }
      resource_def:
        type: OS::Nova::Server
        properties:
          name: { list_join: [ '-', [ { get_param: OS::stack_name }, "ingest", "%index%" ]] }
          key_name: { get_param: key_name }
          image: { get_param: image_id }
          flavor: { get_param: flavor_small  }
          networks:
            - network: { get_param: net }

  sherlock_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: n_sherlock }
      resource_def:
        type: OS::Nova::Server
        properties:
          name: { list_join: [ '-', [ { get_param: OS::stack_name }, "sherlock", "%index%" ]] }
          key_name: { get_param: key_name }
          image: { get_param: image_id }
          flavor: { get_param: flavor_xlarge  }
          networks:
            - network: { get_param: net }

  filter_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: n_filter }
      resource_def:
        type: OS::Nova::Server
        properties:
          name: { list_join: [ '-', [ { get_param: OS::stack_name }, "filter", "%index%" ]] }
          key_name: { get_param: key_name }
          image: { get_param: image_id }
          flavor: { get_param: flavor_small  }
          networks:
            - network: { get_param: net }

  cassandra_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: n_cassandra }
      resource_def:
        type: OS::Nova::Server
        properties:
          name: { list_join: [ '-', [ { get_param: OS::stack_name }, "cassandra", "%index%" ]] }
          key_name: { get_param: key_name }
          image: { get_param: image_id }
          flavor: { get_param: flavor_large  }
          networks:
            - network: { get_param: net }


outputs:
  svc:
    description: Private IP
    value: { get_attr: [svc, first_address] }
  web:
    description: Private IP
    value: { get_attr: [web, first_address] }
  db:
    description: Private IP
    value: { get_attr: [db, first_address] }
  kafka_pub:
    description: Private IP
    value: { get_attr: [kafka_pub, first_address] }
  kafka:
    description: Private IP list
    value: { get_attr: [kafka_group, first_address] }
  ingest:
    description: Private IP list
    value: { get_attr: [ingest_group, first_address] }
  sherlock:
    description: Private IP list
    value: { get_attr: [sherlock_group, first_address] }
  filter:
    description: Private IP list
    value: { get_attr: [filter_group, first_address] }
  cassandra:
    description: Private IP list
    value: { get_attr: [cassandra_group, first_address] }





