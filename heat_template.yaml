heat_template_version: 2016-10-14

description: Heat template to deploy an instance of the Lasair system

parameters:
  key_name:
    description: Name of a KeyPair to enable SSH access.
    type: string
  flavor_small:
    description: Flavor to use for small instances.
    type: string
    default: small
  flavor_medium:
    description: Flavor to use for medium instances.
    type: string
    default: medium
  flavor_large:
    description: Flavor to use for large instances.
    type: string
    default: large
  flavor_xlarge:
    description: Flavor to use for xlarge instances.
    type: string
    default: xlarge
  flavor_kafka:
    description: Flavor to use for kafka instances.
    type: string
    default: kafka 
  volume_large:
    description: Size of large volumes
    type: number
    default: 50
  volume_small:
    description: Size of small volumes
    type: number
    default: 25
  image_id:
    description: Name or ID of the image to use.
    type: string
    default: ubuntu-focal-20.04-nogui
  net:
    description: Name of the private network.
    type: string
    default: LSST - Private Network
  external_net:
    description: Name of the external network.
    type: string
    default: external
  share_net:
    description: Name of the network for Manila shares.
    type: string
    default: cephfs
  share_size:
    description: Size of shared filesystem in GB.
    type: number
    default: 10
  share_user:
    description: Username for CephFS.
    type: string
    default: lasair
  extra_volume_type:
    description: Type to use for extra volumes
    type: string
    default: ceph-ssd
  cassandra_volume_size:
    description: Size of Cassandra filesystems in GB.
    type: number
    default: 15
  n_kafka:
    description: Number of kafka instances
    type: number
    default: 1
  n_ingest:
    description: Number of ingest instances
    type: number
    default: 1
  n_sherlock:
    description: Number of sherlock instances
    type: number
    default: 1
  n_filter:
    description: Number of sherlock instances
    type: number
    default: 1
  n_cassandra:
    description: Number of sherlock instances
    type: number
    default: 1

resources:
  share_fs:
    type: OS::Manila::Share
    properties:
      name: { get_param: OS::stack_name }
      description: "Lasair shared filesystem"
      access_rules: [{"access_level": "rw", "access_type": "cephx", "access_to": { get_param: share_user} }]
      size: { get_param: share_size }
      share_protocol: "CEPHFS"
      share_type: "default"
  svc:
    type: server_with_volume.yaml
    properties:
      key_name: { get_param: key_name }
      flavor: { get_param: flavor_medium  }
      server_name: { list_join: [ '-', [ { get_param: OS::stack_name }, "svc"] ] }
      volume_size: { get_param: volume_large }
      image_id: { get_param: image_id }
      net: { get_param: net }
      share_net: { get_param: share_net }
      external_net: { get_param: external_net }
      assign_public_ip: true
  web:
    type: server_with_volume.yaml
    properties:
      key_name: { get_param: key_name }
      flavor: { get_param: flavor_large  }
      server_name: { list_join: [ '-', [ { get_param: OS::stack_name }, "web"] ] }
      volume_size: { get_param: volume_large }
      image_id: { get_param: image_id }
      net: { get_param: net }
      share_net: { get_param: share_net }
      external_net: { get_param: external_net }
      assign_public_ip: true
  db:
    type: server_with_volume.yaml
    properties:
      key_name: { get_param: key_name }
      flavor: { get_param: flavor_large  }
      server_name: { list_join: [ '-', [ { get_param: OS::stack_name }, "db"] ] }
      volume_size: { get_param: volume_small }
      image_id: { get_param: image_id }
      net: { get_param: net }
      share_net: { get_param: share_net }
  kafka_pub:
    type: server_with_volume.yaml
    properties:
      key_name: { get_param: key_name }
      flavor: { get_param: flavor_small  }
      server_name: { list_join: [ '-', [ { get_param: OS::stack_name }, "kafka_pub"] ] }
      volume_size: { get_param: volume_small }
      image_id: { get_param: image_id }
      net: { get_param: net }
      share_net: { get_param: share_net }
  kafka_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: n_kafka }
      resource_def:
        type: server_with_volume.yaml
        properties:
          key_name: { get_param: key_name }
          flavor: { get_param: flavor_kafka  }
          server_name: { list_join: [ '-', [ { get_param: OS::stack_name }, "kafka", "%index%" ]] }
          volume_size: { get_param: volume_small }
          image_id: { get_param: image_id }
          net: { get_param: net }
          share_net: { get_param: share_net }
  ingest_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: n_ingest }
      resource_def:
        type: server_with_volume.yaml
        properties:
          key_name: { get_param: key_name }
          flavor: { get_param: flavor_small  }
          server_name: { list_join: [ '-', [ { get_param: OS::stack_name }, "ingest", "%index%" ]] }
          volume_size: { get_param: volume_small }
          image_id: { get_param: image_id }
          net: { get_param: net }
          share_net: { get_param: share_net }
  sherlock_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: n_sherlock }
      resource_def:
        type: server_with_volume.yaml
        properties:
          key_name: { get_param: key_name }
          flavor: { get_param: flavor_small  }
          server_name: { list_join: [ '-', [ { get_param: OS::stack_name }, "sherlock", "%index%" ]] }
          volume_size: { get_param: volume_small }
          image_id: { get_param: image_id }
          net: { get_param: net }
          share_net: { get_param: share_net }
  filter_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: n_filter }
      resource_def:
        type: server_with_volume.yaml
        properties:
          key_name: { get_param: key_name }
          flavor: { get_param: flavor_small  }
          server_name: { list_join: [ '-', [ { get_param: OS::stack_name }, "filter", "%index%" ]] }
          volume_size: { get_param: volume_small }
          image_id: { get_param: image_id }
          net: { get_param: net }
          share_net: { get_param: share_net }
  cassandra_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: n_cassandra }
      resource_def:
        type: server_with_volume.yaml
        properties:
          key_name: { get_param: key_name }
          flavor: { get_param: flavor_small  }
          server_name: { list_join: [ '-', [ { get_param: OS::stack_name }, "cassandra", "%index%" ]] }
          volume_size: { get_param: volume_small }
          extra_volume_size: { get_param: cassandra_volume_size }
          image_id: { get_param: image_id }
          net: { get_param: net }
          share_net: { get_param: share_net }

outputs:
  share_fs:
    description: Export locations
    value: { get_attr: [share_fs, export_locations] }
  svc:
    description: Private IP
    value: { get_attr: [svc, first_address] }
  web:
    description: Private IP
    value: { get_attr: [web, first_address] }
  db:
    description: Private IP
    value: { get_attr: [db, first_address] }
  kafka_pub:
    description: Private IP
    value: { get_attr: [kafka_pub, first_address] }
  kafka:
    description: Private IP list
    value: { get_attr: [kafka_group, first_address] }
  ingest:
    description: Private IP list
    value: { get_attr: [ingest_group, first_address] }
  sherlock:
    description: Private IP list
    value: { get_attr: [sherlock_group, first_address] }
  filter:
    description: Private IP list
    value: { get_attr: [filter_group, first_address] }
  cassandra:
    description: Private IP list
    value: { get_attr: [cassandra_group, first_address] }





