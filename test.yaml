# Various tests to validate that Lasair is deployed correctly

---

- hosts: all
  gather_facts: false
  tasks:
    - name: Ping all hosts
      ping:
      tags: ping

# database tests
- hosts: db, backend_db, frontend_db
  gather_facts: false
  tasks:
    - name: db server listening on port 3306
      wait_for:
        port: 3306
        timeout: 1
      tags: net
  tags: db
- hosts: cluster_control
  gather_facts: false
  tasks:
    - name: cluster control server listening on port 9001
      wait_for:
        port: 9001
        timeout: 1
      tags: net
  tags: db
- hosts: localhost
  gather_facts: false
  vars_files:
    - settings.yaml
  vars:
    settings: "{{ lookup('hashi_vault', 'secret='+vault.path+'/settings url='+vault.url)}}"
    git_branch: main
  tasks:
    - name: validate object db schema
      command: "python3 check_schema.py --user={{ settings.master_db_readonly_username }} --password={{ settings.master_db_readonly_password }} --host={{ item }} --port=3306 --url=https://raw.githubusercontent.com/lsst-uk/lasair4/{{ git_branch }}/common/schema/objects.py --format=py"
      loop: "{{ groups['db'] + groups['backend_db'] + groups['frontend_db'] }}"
      changed_when: false
  tags: db

# kafka tests
- hosts: kafka, kafka_pub
  gather_facts: false
  tasks:
    - name: kafka server listening on port 9092
      wait_for:
        port: 9092
        timeout: 1
      tags: net
  tags: kafka,kafka_pub
- hosts: kafka_pub
  gather_facts: false
  tasks:
    - name: kafka server listening on port 29092
      wait_for:
        port: 29092
        timeout: 1
      tags: net
  tags: kafka_pub
- hosts: localhost
  gather_facts: false
  tasks:
    - name: set kafka test str
      set_fact: kafka_test_str="{{ lookup('community.general.random_string', special=false) }}"
    - name: test kafka produce
      shell: "echo {{ kafka_test_str }} | kafkacat -q -b {{ item }}:9092 -t deploy_test -P -p 0"
      loop: "{{ groups['kafka'] }}"
    - name: test kafka consume
      shell: "kafkacat -q -b {{ item }}:9092 -t deploy_test -C -o -1 -c 1 -p 0"
      register: kafka_output
      loop: "{{ groups['kafka'] }}"
      changed_when: false
    - name: check kafka output
      assert:
        that: "item == kafka_test_str"
        quiet: true
      loop: "{{ kafka_output.results | map(attribute='stdout') | list }}"
  tags: kafka

# webserver (+ api & proxy) tests
- hosts: web
  gather_facts: false
  tasks:
    - name: web server listening on port 8080
      wait_for:
        port: 8080
        timeout: 1
      tags: net
    - name: check we can get home page
      ansible.builtin.uri:
        url: "http://{{ ansible_host }}:8080"
      tags: net
    - name: check static file content
      assert:
        that: >
          "{{ lookup('url', 'http://'+ansible_host+':8080/lasair/static/css/lasair-web.css', split_lines=false) | hash('md5') }}"
          ==
          "{{ lookup('url', 'https://raw.githubusercontent.com/lsst-uk/lasair4/main/webserver/staticfiles/css/lasair-web.css', split_lines=false) | hash('md5') }}"
        quiet: true
  tags: web
- hosts: proxy
  tasks:
    - name: proxy server listening on port 80
      wait_for:
        port: 80
        timeout: 1
  tags: proxy
- hosts: api
  tasks:
    - name: api server listening on port 80
      wait_for:
        port: 80
        timeout: 1
      tags: net
  tags: api

# sherlock tests
- hosts: sherlock
  gather_facts: false
  tasks:
    - name: sherlock service listening on port 80
      wait_for:
        port: 80
        timeout: 1
      tags: net
    - name: check that sherlocksvc returns 400 on malformed query
      ansible.builtin.uri:
        url: "http://{{ ansible_host }}/query"
        status_code: 400
    - name: check that sherlocksvc returns 200 on good point query
      ansible.builtin.uri:
        url: "http://{{ ansible_host }}/query"
        body_format: json
        body:
          # this exists in the lite db so we should maybe check the answer too
          ra: "26.626"
          dec: "0.9856"
        status_code: 200
    - name: check that sherlocksvc returns 404 on non-existant object query
      ansible.builtin.uri:
        url: "http://{{ ansible_host }}/object/notarealobject"
        body_format: json
        body:
        status_code: 404
  tags: sherlock

# cassandra tests
- hosts: cassandranodes
  gather_facts: false
  tasks:
    - name: cassandra listening on port 9042
      wait_for:
        port: 9042
        timeout: 1
      tags: net
  tags: cassandra

# grafana tests
- hosts: svc
  gather_facts: false
  vars_files:
    - settings.yaml
  vars:
    secret: "{{ lookup('hashi_vault', 'secret='+vault.path+'/grafana url='+vault.url)}}"
  tasks:
    - name: svc web server listening on port 80
      wait_for:
        port: 80
        timeout: 1
    - name: Check we can get Grafana home page
      ansible.builtin.uri:
        url: http://localhost:3000/
    - name: List Grafana datasource
      ansible.builtin.uri:
        url: http://localhost:3000/api/datasources
        url_username: "{{ secret.admin_username }}" 
        url_password: "{{ secret.admin_password }}"
        force_basic_auth: true
        status_code: 200
  tags: grafana

