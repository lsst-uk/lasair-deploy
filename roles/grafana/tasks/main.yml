---
# tasks file for grafana

- name: "Add Grafana GPG key"
  become: true
  apt_key:
    id: 0E22EB88E39E12277A7760AE9E439B102CF3C0C6
    url: https://packages.grafana.com/gpg.key
    state: present

- name: "Add Grafana repo"
  become: true
  apt_repository:
    repo: "deb https://packages.grafana.com/oss/deb stable main"
    state: present

- name: "Install Packages"
  become: true
  apt:
    pkg:
      - grafana
      - nginx
      - software-properties-common
    state: present
    update-cache: yes

- name: Enable anon access
  become: true
  community.general.ini_file:
    path: /etc/grafana/grafana.ini
    section: auth.anonymous 
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - option: enabled
      value: true
    - option: org_role
      value: Viewer

- name: Set initial admin password
  become: true
  community.general.ini_file:
    path: /etc/grafana/grafana.ini
    section: security
    option: admin_password
    value: "{{ grafana_secret.admin_password }}"

- name: "Install Certbot"
  become: true
  community.general.snap:
    name:
      - certbot
    classic: yes

- name: "Get certificate"
  become: true
  command: "certbot certonly --non-interactive --nginx -m {{ admin_email }} -d {{ server_name }} --agree-tos"
  register: certoutput
  args:
    creates: "/etc/letsencrypt/live/{{ server_name }}"
  when: enable_letsencrypt

- debug: var=certoutput.stdout_lines
  when: enable_letsencrypt

- name: "Enable Grafana service"
  become: true
  service:
    enabled: true
    name:  grafana-server
    state: started
  notify:
    - Pause for 30s

# After starting the Grafana service we pause for 30s before trying to set the admin password to ensure that
# everything is running, otherwise the password reset will fail

- name: Flush handlers
  meta: flush_handlers

# This no loger appears to work as of 9/12/22 so we use the config file to set initial pw instead
#- name: "Set admin password"
#  become: true
#  command: grafana-cli --config=/etc/grafana/grafana.ini admin reset-admin-password {{ grafana_secret.admin_password | quote}}

- name: "Create Nginx config file"
  become: true
  template:
    src: "nginx-{% if (enable_letsencrypt) %}tls{% else %}notls{% endif %}.conf"
    dest: /etc/nginx/sites-available/grafana
  notify: Restart Nginx

- name: "Enable Nginx config"
  become: true
  file:
    src: /etc/nginx/sites-available/grafana
    dest: /etc/nginx/sites-enabled/grafana
    state: link
  notify: Restart Nginx

- name: "Disable default Nginx config"
  become: true
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: Restart Nginx

- name: Flush handlers
  meta: flush_handlers

# Use the Grafana HTTP API
- name: Create datasource
  ansible.builtin.uri:
    url: http://localhost:3000/api/datasources
    url_username: "{{ grafana_secret.admin_username }}" 
    url_password: "{{ grafana_secret.admin_password }}"
    force_basic_auth: true
    status_code: [200, 201, 409] # api will return 409 if datasource already exists
    method: POST
    body_format: json
    body: |
      {
        "name":"Prometheus",
        "type":"prometheus",
        "typeLogoUrl":"",
        "access":"proxy",
        "url":"http://localhost:9090",
        "password":"",
        "user":"",
        "database":"",
        "basicAuth":false,
        "basicAuthUser":"",
        "basicAuthPassword":"",
        "withCredentials":false,
        "isDefault":true,
        "jsonData":{"httpMethod":"POST"},
        "secureJsonFields":{},
        "version":2,
        "readOnly":false
      }

- name: Lookup datasource
  ansible.builtin.uri:
    url: http://localhost:3000/api/datasources/name/Prometheus
    url_username: "{{ grafana_secret.admin_username }}"
    url_password: "{{ grafana_secret.admin_password }}"
    force_basic_auth: true
  register: datasource

#- name: Print datasource 
#  ansible.builtin.debug:
#    var: datasource
    
- name: Create dashboards
  ansible.builtin.uri:
    url: http://localhost:3000/api/dashboards/db
    url_username: "{{ grafana_secret.admin_username }}" 
    url_password: "{{ grafana_secret.admin_password }}"
    force_basic_auth: true
    status_code: [200, 201, 412] # api will return 412 if dashboard already exists
    method: POST
    body_format: json
    body: "{{ lookup('template', item) }}"
  loop:
    - alerts.json.j2
    - processing.json.j2
    - system.json.j2

